openapi: 3.0.0
info:
  title: Glyph
  version: 0.0.1
  contact:
    name: OneAdvanced
    url: https://oneadvanced.com/contact-us
    email: api@oneadvanced.com
  license:
    name: Commercial License - OneAdvanced
    url: "https://oneadvanced.com"
  termsOfService: "https://www.oneadvanced.com/advanced-terms-and-conditions/"
  x-audience: company-internal
  x-api-id: 3bd860e6-ee3a-4c58-9193-bc93b8b4f9c3
  description: >
    The OneAdvanced AI <b>F</b>ile <b>P</b>rocessing <b>A</b>gent (FPA), Glyph, is a <i>complete</i> multi-modal AI powered solution for processing any file or document.<br><br>
    
    Features include, auditing, barcode generation and recognition, chat, document classification, data extraction & document manipulation.<br><br>
    
    For more details on each endpoint functionality, see the detailed documentation therein.

    <hr>

servers:
  - url: https://lhejchjgwiaqykglszvd.supabase.co/auth/v1/oahack2025
    description: Use this URL to start using it.
tags:

  - name: Audit
    description: Every interaction with Glyph is audited in detail. Provide the fileId and a complete history is provided.
  - name: Barcode
    description: Either generate a QR Code, or read a barcode from an existing File or Document.
  - name: Chat
    description: Glyph has a built in chatbot helper to guide you. No more TLDR, no more RTFM, just ask.
  - name: Classify
    description: A very simple endpoint returning classification of a File / Document. 
  - name: Distribute
    description: Send your File / Document and / or it's data as an Email attachment, SMS or WhatsApp.
  - name: Extract
    description: Extract text from a File / Document and choose the response format you'd like as a consumer.
  - name: Manipulate
    description: File and Document manipulation can be time consuming and a very manual process.<br>Glyph makes it easy and fast.  
  - name: Upload
    description: To allow your files and documents to be securely uploaded and virus scanned, they must first be uploaded to Glyph and where successful a unique fileId returned. This is then used to perform a function.

security:
  - supabaseAuth: []
paths:
  /chat:
    post:
      tags:
        - Chat
      operationId: processChat
      summary: Process a text-based chat interaction
      description: Initiates a chat interaction by sending text-based messages to Glyph.
      requestBody:
        description: The chat messages and model configuration.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                        enum:
                          - system
                          - user
                          - assistant
                        description: The role of the message sender.
                        minLength: 1
                        maxLength: 20 # Example limit
                        example: "user"
                    required:
                      - role
                      - content
                  minItems: 1
                  maxItems: 10
                model:
                  type: string
                  description: The AI model to use for processing.
                  default: "grok-3-latest"
                  minLength: 1
                  maxLength: 100 # Example limit
                  example: "llama-2-70b-chat"
                stream:
                  type: boolean
                  description: Whether to stream the response.
                  default: false
                  example: false
                temperature:
                  type: number
                  description: Controls the randomness of the output (0 for deterministic).
                  default: 0
                  minimum: 0
                  maximum: 1
                  multipleOf: 0.01 # Example: Temperature in increments of 0.01
                  example: 0.8
              required:
                - messages
            example:
              messages:
                - role: "system"
                  content: "You are helpful assistant who is an expert at document redaction. I'm going to provide you a document, please redact it effectively."
                - role: "user"
                  content: "redact only email addresses from the document I've provided you."
              model: "grok-3-latest"
              stream: false
              temperature: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                - model
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Unique identifier for the chat completion.
                    example: "fc6896b9-caf0-451c-932e-b6920f0d4b09"
                  object:
                    type: string
                    description: The type of object returned.
                    example: "chat.completion"
                    minLength: 1
                    maxLength: 50 # Example limit
                  created:
                    type: integer
                    description: The timestamp of when the chat completion was created (in seconds since epoch).
                    example: 1746622886
                  model:
                    type: string
                    description: The model used for the chat completion.
                    example: "grok-3-beta"
                    minLength: 1
                    maxLength: 100 # Example limit
                  choices:
                    type: array
                    items:
                      type: object
                      properties:
                        index:
                          type: integer
                          description: The index of the choice in the list.
                          example: 0
                        message:
                          type: object
                          properties:
                            role:
                              type: string
                              enum:
                                - assistant
                              description: The role of the message.
                              example: "assistant"
                              minLength: 1
                              maxLength: 20 # Example limit
                            content:
                              type: string
                              nullable: true
                              description: The content of the message.
                              example: "Understood. I will redact only the email addresses from the document you provide. Please share the document or text you'd like me to work on, and I will replace any email addresses with a placeholder like [REDACTED]. If you have a specific format or placeholder you'd prefer for the redaction, let me know. I'm ready to assist!"
                              minLength: 1
                              maxLength: 4000 # Example limit
                            refusal:
                              type: string
                              nullable: true
                              description: The reason for refusal, if the model refused to respond.
                              example: null
                              maxLength: 200 # Example limit
                          required:
                            - role
                            - content
                        finish_reason:
                          type: string
                          enum:
                            - stop
                            - length
                            - content_filter
                            - function_call
                          description: The reason the model stopped generating tokens.
                          example: "stop"
                          minLength: 1
                          maxLength: 20 # Example limit
                      required:
                        - index
                        - message
                        - finish_reason
                    minItems: 1
                    maxItems: 1
                  usage:
                    type: object
                    properties:
                      prompt_tokens:
                        type: integer
                        description: The number of tokens used in the prompt.
                        example: 49
                      completion_tokens:
                        type: integer
                        description: The number of tokens used in the completion.
                        example: 71
                      total_tokens:
                        type: integer
                        description: The total number of tokens used.
                        example: 120
                      prompt_tokens_details:
                        type: object
                        nullable: true
                        properties:
                          text_tokens:
                            type: integer
                            example: 49
                          audio_tokens:
                            type: integer
                            example: 0
                          image_tokens:
                            type: integer
                            example: 0
                          cached_tokens:
                            type: integer
                            example: 0
                      completion_tokens_details:
                        type: object
                        nullable: true
                        properties:
                          reasoning_tokens:
                            type: integer
                            example: 0
                          audio_tokens:
                            type: integer
                            example: 0
                          accepted_prediction_tokens:
                            type: integer
                            example: 0
                          rejected_prediction_tokens:
                            type: integer
                            example: 0
                    required:
                      - prompt_tokens
                      - completion_tokens
                      - total_tokens
                  system_fingerprint:
                    type: string
                    nullable: true
                    description: A unique identifier representing the model version.
                    example: "fp_e274c7b208"
                    maxLength: 100 # Example limit
                example:
                  id: "fc6896b9-caf0-451c-932e-b6920f0d4b09"
                  object: "chat.completion"
                  created: 1746622886
                  model: "grok-3-beta"
                  choices:
                    - index: 0
                      message:
                        role: "assistant"
                        content: "Understood. I will redact only the email addresses from the document you provide. Please share the document or text you'd like me to work on, and I will replace any email addresses with a placeholder like [REDACTED]. If you have a specific format or placeholder you'd prefer for the redaction, let me know. I'm ready to assist!"
                        refusal: null
                      finish_reason: "stop"
                  usage:
                    prompt_tokens: 49
                    completion_tokens: 71
                    total_tokens: 120
                    prompt_tokens_details:
                      text_tokens: 49
                      audio_tokens: 0
                      image_tokens: 0
                      cached_tokens: 0
                    completion_tokens_details:
                      reasoning_tokens: 0
                      audio_tokens: 0
                      accepted_prediction_tokens: 0
                      rejected_prediction_tokens: 0
                  system_fingerprint: "fp_e274c7b208"
        '400':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem400Response"
        '401':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem401Response"
        '403':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem403Response"
        '415':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem415Response"
        '500':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem500Response" # Assuming a standard 500 response
  /upload:
    post:
      tags:
        - Upload
      operationId: uploadFile
      summary: Upload a file for processing
      description: >
        Upload a file and receive a file identifier (GUID) that can be used for further processing.<br><br><b>All</b> files are AV scanned, no exceptions.<br><br>Once a file is uploaded to Glyph and shows as 'clean', the AI can be used to perform processes on it using the returned File ID.
      requestBody:
        description: The file to be processed is provided as binary data.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 9999
              required:
                - file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
        '400':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem400Response"
        '401':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem401Response"
        '403':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem403Response"
        '415':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem415Response"
  /extract:
    post:
      tags:
        - Extract
      operationId: extractText
      summary: Extract text from a given file or Document
      description: >
        The textual content of your file is extracted and returned with 3 options, either as json, xml or markdown. If it requires OCR, that is done <b>automatically</b> if a text layer is not found.
      requestBody:
        description: Provide the GUID of the file to perform OCR on and the desired return data format.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileId:
                  type: string
                  format: uuid
                  description: Identifier (GUID) of the uploaded file.
                  example: "123e4567-e89b-12d3-a456-426614174000"
                returnDataAs:
                  type: string
                  enum:
                    - XML
                    - MARKDOWN
                    - JSON
                  description: Specify the format in which to return the extracted data.
                  example: JSON
              required:
                - fileId
                - returnDataAs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OcrResponse'
              example:
                extractedText: "This is the extracted text in JSON."
            application/xml:
              schema:
                type: string
                description: Extracted text in XML format.
              example: |
                <OcrResponse>
                  <extractedText>This is the extracted text in XML.</extractedText>
                </OcrResponse>
            text/csv:
              schema:
                type: string
                description: Extracted text in Markdown format.
              example: |
                ```
                This is the extracted text in Markdown.
                ```
        '400':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem400Response"
        '401':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem401Response"
        '403':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem403Response"
        '415':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem415Response"
  /redact:
    post:
      tags:
        - Manipulate
      operationId: redactFile
      summary: Redact sensitive data in a file
      description: >
        Automatic or Consumer driven Redaction</b><br>Automatic mode will use AI to dynamically identify PII and redact all values found.<br>Value mode will accommodate key values as specified by the consumer, such as name, address, email and so on.<br>Manual mode will allow terms specified by the consumer to be redacted.<br><br>All values use a traditional black box overlaying the values.
      requestBody:
        description: Provide the file GUID and specify the redaction mode and optional values.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileId:
                  type: string
                  format: uuid
                  description: Identifier (GUID) of the uploaded file.
                  example: "123e4567-e89b-12d3-a456-426614174000"
                mode:
                  type: string
                  enum: [auto, value, manual]
                  description: >-
                    Redaction mode. "auto" uses AI to automatically detect and
                    redact PII, "value" allows you to specify values to redact, or
                    "manual" allows you to give AI instructions on what types of
                    values to redact, such as email addresses, surnames, and so on
                    (consumer directed).
                  example: auto
                values:
                  type: string
                  minLength: 0
                  maxLength: 9999
                  description: >-
                    Values or instructions for redaction. Only used in conjunction
                    with "value" or "manual" modes. Provide specific values to redact
                    (for "value" mode) or instructions (for "manual" mode).
                  example: email addresses, phone numbers
              required:
                - fileId
                - mode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedactionResponse'
        '400':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem400Response"
        '401':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem401Response"
        '403':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem403Response"
        '415':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem415Response"
  /convert:
    post:
      tags:
        - Manipulate
      operationId: convertFile
      summary: Convert file to a different format
      description: >
        Convert any filetype to any other filetype, such as DOCX to PDF, XLS to PPT and so on.
      requestBody:
        description: Provide the file GUID and the desired target format.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileId:
                  type: string
                  format: uuid
                  description: Identifier (GUID) of the uploaded file.
                  example: "123e4567-e89b-12d3-a456-426614174000"
                targetFormat:
                  type: string
                  description: Desired output file format (e.g., pdf, txt, jpg).
                  minLength: 2
                  maxLength: 10
              required:
                - fileId
                - targetFormat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversionResponse'
        '400':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem400Response"
        '401':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem401Response"
        '403':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem403Response"
        '415':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem415Response"
  /barcode:
    get:
      tags:
        - Barcode
      operationId: generateBarcode
      summary: Generate a barcode
      description: >
        Generate a barcode returned as a PNG which can then be used to attach to a File / Document.
      parameters:
        - in: query
          name: data
          schema:
            type: string
            minLength: 1
            maxLength: 9999
          description: The data to be encoded in the QR code.
          required: true
          example: "https://www.example.com"
        - in: query
          name: size
          schema:
            type: string
            default: "200x200"
            pattern: '^\d+x\d+$'
            maxLength: 9999
            minLength: 4
          description: The size of the QR code image (e.g., 200x200).
          required: false
          example: "300x300"
      responses:
        '200':
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
        '400':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem400Response"
        '401':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem401Response"
        '403':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem403Response"
    post:
      tags:
        - Barcode
      operationId: recognizeBarcode
      summary: Recognize barcode in a file
      description: >
        Billions of barcode's are read every single day across the world, QR codes particularly are prevalent now as they hold a lot of information, such as URLs.<br><br>CODE 128 and QR Code barcode's are supported and automatically detected.<br><br>If more than one barcode is present, their values returned as an array up to 10 per document.
      requestBody:
        description: Provide the file GUID for barcode detection.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileId:
                  type: string
                  format: uuid
                  description: Identifier (GUID) of the uploaded file.
                  example: "123e4567-e89b-12d3-a456-426614174000"
              required:
                - fileId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarcodeResponse'
        '400':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem400Response"
        '401':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem401Response"
        '403':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem403Response"
        '415':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem415Response"
  /reorient:
    post:
      tags:
        - Manipulate
      operationId: reorientFile
      summary: Reorient an image file
      description: >
        Assume a document is landscape and you want to make it portrait, or vice versa.
      requestBody:
        description: Provide the file GUID for reorientation.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileId:
                  type: string
                  format: uuid
                  description: Identifier (GUID) of the uploaded file.
                  example: "123e4567-e89b-12d3-a456-426614174000"
              required:
                - fileId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReorientationResponse'
        '400':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem400Response"
        '401':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem401Response"
        '403':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem403Response"
        '415':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem415Response"
  /split:
    post:
      tags:
        - Manipulate
      operationId: splitFile
      summary: Split a multi-page document
      description: >
       Assume your document is 30 pages, and you want to split it in to 3 documents of 10 pages each.
      requestBody:
        description: Provide the file GUID and an optional array of page numbers to extract.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileId:
                  type: string
                  format: uuid
                  description: Identifier (GUID) of the uploaded file.
                  example: "123e4567-e89b-12d3-a456-426614174000"
                pages:
                  type: array
                  description: Array of page numbers to extract. If omitted, all pages will be split.
                  items:
                    type: integer
                    minimum: 1
                    maximum: 1000
                  minItems: 1
                  maxItems: 100
              required:
                - fileId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SplitResponse'
        '400':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem400Response"
        '401':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem401Response"
        '403':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem403Response"
        '415':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem415Response"
  /merge:
    post:
      tags:
        - Manipulate
      operationId: mergeFiles
      summary: Merge multiple files
      description: >
        Assume you have multiple documents you want to merge into one.
      requestBody:
        description: Provide a non-empty array of file GUIDs to merge.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fileIds:
                  type: array
                  description: A non-empty array of file identifiers (GUIDs) to merge.
                  items:
                    type: string
                    format: uuid
                    example: "123e4567-e89b-12d3-a456-426614174000"
                  minItems: 1
                  maxItems: 10
              required:
                - fileIds
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeResponse'
        '400':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem400Response"
        '401':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem401Response"
        '403':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem403Response"
        '415':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem415Response"

  /audit:
    get:
      tags:
        - Audit
      operationId: getDocumentAuditLog
      summary: Retrieve the audit log for document activities
      description: Return a complete audit of the history of a Document / File by asking Glyph to tell you.
      parameters:
        - in: query
          name: fileId
          schema:
            type: string
            format: uuid
          description: Filter audit logs by a specific File ID (GUID).
          example: "fc6896b9-caf0-451c-932e-b6920f0d4b09"
        - in: query
          name: userId
          schema:
            type: string
            minLength: 1
            maxLength: 100
          description: Filter audit logs by a specific User ID.
          example: "user123"
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Filter audit logs by events occurring on or after this date (YYYY-MM-DD).
          example: "2025-05-01"
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Filter audit logs by events occurring on or before this date (YYYY-MM-DD).
          example: "2025-05-07"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object # Changed from array to object
                properties:
                  auditLogs: # Added a wrapping property
                    type: array
                    minItems: 1
                    items:
                      type: object
                      properties:
                        timestamp:
                          type: string
                          format: date-time
                          description: Timestamp of the audit event.
                          example: "2025-05-07T14:35:00Z"
                        fileId:
                          type: string
                          format: uuid
                          description: Identifier of the file involved (GUID).
                          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                        userId:
                          type: string
                          description: Identifier of the user or system involved.
                          minLength: 1
                          maxLength: 100
                          example: "user123"
                        activityType:
                          type: string
                          enum:
                            - upload
                            - avScan
                            - chatInteraction
                            - redaction
                            - download
                          description: The type of document activity.
                          example: "redaction"
                        activityDetails:
                          type: object
                          nullable: true
                          description: Specific details about the document activity.
                          example:
                            redactionType: "emailAddresses"
                            modelUsed: "grok-3-latest"
                        processingTimeMs:
                          type: integer
                          description: The time taken to perform the activity in milliseconds (if applicable).
                          example: 1250
                        status:
                          type: string
                          enum:
                            - success
                            - failure
                          description: The status of the document activity.
                          minLength: 1
                          maxLength: 20
                          example: "success"
                        errorMessage:
                          type: string
                          nullable: true
                          description: Error message if the activity failed.
                          minLength: 1
                          maxLength: 500
                          example: "Redaction process timed out."
                      required:
                        - timestamp
                        - fileId
                        - userId
                        - activityType
                        - status
                required:
                  - auditLogs
                example:
                  auditLogs:
                    - timestamp: "2025-05-07T14:30:00Z"
                      fileId: "00112233-4455-6677-8899-aabbccddeeff"
                      userId: "system"
                      activityType: "upload"
                      activityDetails:
                        fileName: "report.pdf"
                        fileSizeBytes: 102400
                      status: "success"
                    - timestamp: "2025-05-07T14:32:00Z"
                      fileId: "99887766-5544-3322-1100-fedcba987654"
                      userId: "system"
                      activityType: "avScan"
                      activityDetails:
                        scanEngine: "AWS Sentinel"
                        status: "clean"
                      status: "success"
        '400':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem400Response"
        '401':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem401Response"
        '403':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem403Response"
        '500':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem500Response"

  /classify:
    post:
      tags:
        - Classify
      operationId: classifyDocument
      summary: Classify a document
      description: Allowing a document to be classified returning a single / very few words to allow a native workflow be used to route the Document / File.
      requestBody:
        description: The fileId of the document to classify.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fileId:
                  type: string
                  format: uuid
                  description: The ID of the file to classify.
                  example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
              required:
                - fileId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  classification:
                    type: string
                    description: The classification of the document.
                    example: "Invoice"
                required:
                  - classification
              example:
                classification: "Invoice"
        '400':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem400Response"
        '401':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem401Response"
        '403':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem403Response"
        '415':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem415Response"
        '500':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem500Response"

  /distribute:
    post:
      tags:
        - Distribute
      operationId: sendIt
      summary: Distribute a file via email, text, or WhatsApp
      description: This endpoint allows you to send a file as an attachment using different distribution methods.
      requestBody:
        description: Provide the file ID and distribution details.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileId:
                  type: string
                  description: Identifier (GUID) of the file to be distributed.
                  format: uuid
                  example: "123e4567-e89b-12d3-a456-426614174000"
                medium:
                  type: string
                  enum:
                    - email
                    - text
                    - whatsapp
                  description: The distribution method.
                  example: email
                recipient:
                  type: string
                  description: The recipient's address (email, phone number).
                  maxLength: 255
                  minLength: 1
                  example: john.doe@example.com
                subject:
                  type: string
                  description: The subject of the message (for email).
                  maxLength: 200
                  minLength: 1
                  example: "File Distribution"
                message:
                  type: string
                  description: The message body.
                  maxLength: 1000
                  minLength: 1
                  example: "Please find the attached file."
              required:
                - fileId
                - medium
                - recipient
      responses:
        '200':
          description: File distribution successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                    maxLength: 200
                    minLength: 1
                  medium:
                    type: string
                    description: The medium used for distribution
                    maxLength: 20
                    minLength: 1
                  recipient:
                    type: string
                    description: The recipient
                    maxLength: 255
                    minLength: 1
                example:
                  message: "File sent successfully via email."
                  medium: email
                  recipient: john.doe@example.com
        '400':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem400Response"
        '401':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem401Response"
        '403':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem403Response"
        '415':
          $ref: "https://api.swaggerhub.com/domains/AdvancedComputerSoft/advanced-common-oas3/1.9.0#/components/responses/Problem415Response"

components:
  securitySchemes:
    supabaseAuth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: "https://lhejchjgwiaqykglszvd.supabase.co/auth/v1/token?grant_type=client_credentials"
          scopes: {}
  schemas:
    FileResponse:
      type: object
      properties:
        fileId:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      required:
        - fileId
        - message
    OcrResponse:
      type: object
      properties:
        extractedText:
          type: string
          example: "Extracted text appears here..."
      required:
        - extractedText
    RedactionResponse:
      type: object
      properties:
        redactedFileUrl:
          type: string
          example: "https://example.com/files/redacted-file.pdf"
      required:
        - redactedFileUrl
    ConversionResponse:
      type: object
      properties:
        convertedFileUrl:
          type: string
          example: "https://example.com/files/converted-file.pdf"
      required:
        - convertedFileUrl
    BarcodeResponse:
      type: object
      properties:
        barcodes:
          type: array
          description: Array of detected barcode strings.
          items:
            type: string
          minItems: 1
          maxItems: 10
          example: ["012345678912"]
      required:
        - barcodes
    ReorientationResponse:
      type: object
      properties:
        reorientedFileUrl:
          type: string
          example: "https://example.com/files/reoriented-file.jpg"
      required:
        - reorientedFileUrl
        - message
    SplitResponse:
      type: object
      properties:
        splitFiles:
          type: array
          description: Array of URLs for the split files.
          items:
            type: string
          minItems: 1
          maxItems: 10
          example: ["https://example.com/files/split-1.pdf", "https://example.com/files/split-2.pdf"]
      required:
        - splitFiles
        - message
    MergeResponse:
      type: object
      properties:
        mergedFileUrl:
          type: string
          example: "https://example.com/files/merged-file.pdf"
      required:
        - mergedFileUrl
        - message
